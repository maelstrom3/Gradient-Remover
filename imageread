function [RGBadj, size]=imageread(image, CFApat, satlim)
% imageread takes input image and outputs  RGBadj and size
% image is string referring to image file to be read ( DNG or TIF)
% RGBadj is 3 dimensional array containing adjustment masks in R,G, and B
% size is [length width] of target image

% Image reading, linearizing, and white balance mask method and function is from
% "Processing RAW Images in MATLAB" by Rob Summer, found at
% https://users.soe.ucsc.edu/~rcsumner/rawguide/RAWguide.pdf

warning('off','all');           %supress warnings

%-Read image
info = imfinfo(image);          %inspect image info, thumbnail
info.SubIFDs{1};                %IFD with target image info

t = Tiff(image,'r');            %set image to read
offsets = getTag(t,'SubIFD');   %offsets contains number which indicates the correct SubIFD; SubIFD is TIF tag which contains SubIFD designations
setSubDirectory(t,offsets(1));  %offsets(1) indicates first SubIFD, sets t to now represent SubIFD(1)
cfa = read(t);                  %image values
close(t);


%- Crop to only valid pixels
x_origin = info.SubIFDs{1}.ActiveArea(2)+1;         %+1 due to MATLAB indexing
width = info.SubIFDs{1}.DefaultCropSize(1);         %image width
y_origin = info.SubIFDs{1}.ActiveArea(1)+1;
height = info.SubIFDs{1}.DefaultCropSize(2);        %image height
cfa = double(cfa(y_origin:y_origin+height-1,x_origin:x_origin+width-1)); %crop
size=[height width];

%-Linearize values from 0 to 1; 
% process is similar to as described in DNG
% documentation http://www.adobe.com/content/dam/Adobe/en/products/photoshop/pdfs/dng_spec_1.4.0.0.pdf

if isfield(info.SubIFDs{1},'LinearizationTable')   %checks for linearization table
    lintab=info.SubIFDs{1}.LinearizationTable;     %extracts lin table
    lin_bayer = lintab(cfa+1);                     %linearizes pixel values
end

cfa=[];                                            %clear cfa        

black = info.SubIFDs{1}.BlackLevel;                %black level value
saturation = info.SubIFDs{1}.WhiteLevel;           %saturation level value
lin_bayer = (lin_bayer-black)/(saturation-black);  %normalize to saturation   
lin_bayer = max(0.00001,min(lin_bayer,1));         %remove negative values, values over limit, contrain to [0,1]
                                   
%-
% White balancing is omitted due to method of processing each channel
%-

%-Introduce cutoff for star removal
desatbayer=zeros(height,width);                 %preallocate

for i=1:height
    for j=1:width
        if lin_bayer(i,j)>satlim                %if value is greater than limit
            desatbayer(i,j)=0.00001;            %replace saturated pixels with ~0 (0.00001 used so 
        else                                    %removed values don't "trip" sort section)
            desatbayer(i,j)=lin_bayer(i,j);     %do not alter values below limit
        end
    end
end

%- Sort image into R G B

%wb_X converts non-target color pixels to negative values which are then 
%removed by a(a>0)

lin_bayer=desatbayer;               
hheight=height/2;                   %Reducing image to R G or B reduces size by 1/4
hwidth=width/2;

wb_R = [1 -1 -1];                                               %R values
Rmask=wbmask(size(lin_bayer,1),size(lin_bayer,2),wb_R,CFApat);  %applies wb_R
a=lin_bayer.*Rmask;
RGBbayer(:,:,1)=reshape(a(a>0),[hheight,hwidth]);               %RGBbayer has color sorted image


wb_G = [-1 1 -1];                                               %G values
Gmask=wbmask(size(lin_bayer,1),size(lin_bayer,2),wb_G,CFApat);  %applies wb_G
a=lin_bayer.*Gmask;
a=reshape(a(a>0),[hheight,hwidth*2]);

aa=zeros([hheight,hwidth]);                    %twice as many green pixels as R and B
for i=1:hheight                                %average green array to reduce it to 1/4 size 
k=1;
    for j=1:2:width
        aa(i,k)=(a(i,j)+a(i,j+1))/2;
        k=k+1;
    end
end
RGBbayer(:,:,2)=aa; 


wb_B = [-1 -1 1];                                               %B values
Bmask=wbmask(size(lin_bayer,1),size(lin_bayer,2),wb_B,CFApat);  %applies wb_B
a=lin_bayer.*Bmask;
RGBbayer(:,:,3)=reshape(a(a>=0),[hheight,hwidth]);

%------------
% error in code above: logical for R (a>0) excludes zeros, but B (a>=0) includes 0s
% i have no idea why. can't figure it out. not that important
%----------------


%- Generate fit functions
%creates array which contains gradient determined by a polynomial fit to
%desaturated  image (by color channel). Image is subdivided into a small
%array determined by 'division'. Fit functions are generated for each
%row, then generated for each column. Array determined by fit function is
%generated and averaged to create single array which represents the overall
%gradient of image.


%subdivide
division=gcd(hheight,hwidth);       %finds greatest common denominator to subdivide image
fitwidth=1:hwidth;
fitheight=1:hheight;
xx=[1:division:hwidth];
yy=[1:division:hheight];


for b=1:3
target=RGBbayer(:,:,b);             %fit target
k=1;

%Horizontal fits
    for j=yy                        %row where interpolation occurs
        
        [xData, yData] = prepareCurveData( fitwidth, target(j,:) );     %shape data for fit
        ft = fittype( 'poly3' );                                        %polyX is fit type. X=2 to 5
        [fitresult, gof] = fit( xData, yData, ft,);             %generate fit function for horizontal cross-sections
        co=coeffvalues(fitresult);                              %co is values of coefficients for poly fxn                                      
        polylength=length(co);

    switch polylength               %creates in-line poly function 
    case 3
        f=@(x) co(1)*x^2 + co(2)*x + co(3);
    case 4
        f=@(x) co(1)*x^3 + co(2)*x^2 + co(3)*x^1 + co(4);
    case 5
        f=@(x) co(1)*x^4 + co(2)*x^3 + co(3)*x^2 + co(4)*x + co(5);
    case 6
        f=@(x) co(1)*x^5 + co(2)*x^4 + co(3)*x^3 + co(4)*x^2 + co(5)*x + co(6);
    otherwise
        disp('too much fit bro')
    end


kk=1;
    for i=xx                                        %xx is set of evaluation points in image columns
        adjh(k,kk)=f(i);                            %f(X) is gradient, adjh is array of gradient values
        kk=kk+1;
    end
k=k+1;
end

k=1;

%Vertical plots
    for j=xx             %column where interpolation occurs

    % Fit

        [xData, yData] = prepareCurveData( fitheight, target(:,j) );
        ft = fittype( 'poly3' );                            %polyX number
        [fitresult, gof] = fit( xData, yData, ft,'Exclude', yData==0 ); % Fit model to data.
        co=coeffvalues(fitresult);
        polylength=length(co);


    switch polylength
    case 3
        f=@(x) co(1)*x^2 + co(2)*x + co(3);
    case 4
        f=@(x) co(1)*x^3 + co(2)*x^2 + co(3)*x^1 + co(4);
    case 5
        f=@(x) co(1)*x^4 + co(2)*x^3 + co(3)*x^2 + co(4)*x + co(5);
    case 6
        f=@(x) co(1)*x^5 + co(2)*x^4 + co(3)*x^3 + co(4)*x^2 + co(5)*x + co(6);
    otherwise
        disp('chillllllll')
    end


kk=1;
    for i=yy
        adjv(kk,k)=f(i);            %target(i,j)-f(i);
        kk=kk+1;
    end
k=k+1;
end

adj=(adjv+adjh)/2;                  %takes average of row and column fit arrays

RGBadj(:,:,b)=adj;                  %results go into RGB adj

end

%-Blur gradient arrays to smooth
hsize=5;                       %filter size
h=fspecial('average',hsize);   %creates averaging filter 'h'
for i=1:3
RGBadj(:,:,i)=imfilter(RGBadj(:,:,i),h,'replicate');    %blurs each gradient array
end
warning('on','all');


